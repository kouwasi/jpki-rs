name: Rust

on:
  push: ~
  release:
    types:
      - published

env:
  CARGO_TERM_COLOR: always

jobs:
  checks:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v1

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt,clippy

      - name: Install libpcsclite
        run: sudo apt install libudev-dev libpcsclite-dev

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

  build:
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - aarch64-linux-android
          - armv7-linux-androideabi
        include:
          - target: x86_64-pc-windows-msvc
            host: windows-2022
            cli: true
            android: false
          - target: x86_64-apple-darwin
            host: macos-12
            cli: true
            android: false
          - target: x86_64-unknown-linux-gnu
            host: ubuntu-20.04
            cli: true
            android: false
          - target: aarch64-linux-android
            host: ubuntu-20.04
            cli: false
            android: true
          - target: armv7-linux-androideabi
            host: ubuntu-20.04
            cli: false
            android: true

    runs-on: ${{ matrix.host }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v1

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install libpcsclite
        if: ${{ matrix.cli && matrix.host == 'ubuntu-20.04' }}
        run: sudo apt install libudev-dev libpcsclite-dev

      - name: Install Android NDK
        if: ${{ matrix.android }}
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r23b-linux.zip
          unzip android-ndk-r23b-linux.zip
          export TOOLCHAIN="${PWD}/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "$TOOLCHAIN" >> $GITHUB_PATH
          ln -s "$TOOLCHAIN/llvm-ar" "$TOOLCHAIN/${{ matrix.target }}-ar"
          ln -s "$TOOLCHAIN/llvm-ar" "$TOOLCHAIN/arm-linux-androideabi-ar"

      - name: Build (CLI)
        if: ${{ matrix.cli }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target=${{ matrix.target }} -p jpki-cli

      - name: Build (Android)
        if: ${{ matrix.android }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target=${{ matrix.target }} -p jpki-android
          use-cross: true

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        with:
          name: workspace
          path: '.'

  deploy:
    runs-on: ubuntu-20.04
    if: ${{ github.event_name == 'release' }}
    needs:
      - build
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: workspace

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install libnfc
        run: sudo apt install libnfc5 libnfc-dev udev libudev-dev pcscd libpcsclite-dev

      - name: Install cargo-edit-version
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --verbose cargo-edit-version

      - name: Set version by the release tag
        run:
          cargo-edit-version "${{ github.event.release.tag_name }}"
          cd ./cli && cargo-edit-version "${{ github.event.release.tag_name }}"

      - name: Log into crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io (Core)
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --verbose --allow-dirty -p jpki

      - name: Publish to crates.io (CLI)
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --verbose --allow-dirty -p jpki-cli
