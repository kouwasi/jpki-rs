name: Rust

on:
  push: ~
  release:
    types:
      - published

env:
  CARGO_TERM_COLOR: always

jobs:
  checks:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt,clippy

      - uses: Swatinem/rust-cache@76686c56f2b581d1bb5bda44b51f7e24bd9b8b8e

      - name: Install libpcsclite
        run: sudo apt update && sudo apt install libpcsclite-dev

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --exclude jpki-ffi-generic

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --exclude jpki-ffi-generic --exclude jpki-ffi-android --verbose

  checks-nightly:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install nightly-2022-07-26
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-07-26
          override: true
          components: rustfmt,clippy

      - uses: Swatinem/rust-cache@76686c56f2b581d1bb5bda44b51f7e24bd9b8b8e

      - name: Install libpcsclite
        run: sudo apt update && sudo apt install libpcsclite-dev

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -p jpki-ffi-generic

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p jpki-ffi-generic --verbose

  build:
    needs:
      - checks

    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-unknown-linux-gnu
          - aarch64-linux-android
          - armv7-linux-androideabi
        features:
          - '--no-default-features'
          - '--features tracing'
        include:
          - target: x86_64-pc-windows-msvc
            host: windows-2022
            artifact: jpki-cli.exe
            cli: true
            android: false
            additionalFeatures: '--features pcsc'
          - target: x86_64-apple-darwin
            host: macos-12
            artifact: jpki-cli
            cli: true
            android: false
            additionalFeatures: '--features pcsc'
          - target: aarch64-apple-darwin
            host: macos-12
            artifact: jpki-cli
            cli: true
            android: false
            additionalFeatures: '--features pcsc'
          - target: x86_64-unknown-linux-gnu
            host: ubuntu-22.04
            artifact: jpki-cli
            cli: true
            android: false
          - target: aarch64-linux-android
            host: ubuntu-22.04
            cli: false
            android: true
          - target: armv7-linux-androideabi
            host: ubuntu-22.04
            cli: false
            android: true

    runs-on: ${{ matrix.host }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - id: cache-key
        run: echo "::set-output name=key::$(echo '${{ toJSON(matrix) }}' | shasum -a 256)"

      - uses: Swatinem/rust-cache@76686c56f2b581d1bb5bda44b51f7e24bd9b8b8e
        with:
          key: ${{ steps.cache-key.outputs.key }}

      - name: Install libpcsclite
        if: ${{ matrix.cli && startsWith(matrix.host, 'ubuntu-') }}
        run: sudo apt update && sudo apt install libpcsclite-dev

      - name: Install Android NDK
        if: ${{ matrix.android }}
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r23b-linux.zip
          unzip android-ndk-r23b-linux.zip
          export TOOLCHAIN="${PWD}/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "$TOOLCHAIN" >> $GITHUB_PATH
          ln -s "$TOOLCHAIN/llvm-ar" "$TOOLCHAIN/${{ matrix.target }}-ar"
          ln -s "$TOOLCHAIN/llvm-ar" "$TOOLCHAIN/arm-linux-androideabi-ar"

      - name: Build (Core)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target=${{ matrix.target }} ${{ matrix.features }} ${{ matrix.additionalFeatures }} -p jpki

      - name: Build (CLI)
        if: ${{ matrix.cli }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target=${{ matrix.target }} -p jpki-cli

      - name: Build (Android)
        if: ${{ matrix.android }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target=${{ matrix.target }} -p jpki-ffi-android
          use-cross: true

      - name: Compress artifacts into .tar.gz file
        if: ${{ matrix.cli }}
        run: tar -C ./target/${{ matrix.target }}/release -czf jpki-cli-${{ matrix.target }}.tar.gz ${{ matrix.artifact }}

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cli }}
        with:
          path: jpki-cli-${{ matrix.target }}.tar.gz

      - uses: svenstaro/upload-release-action@v2
        if: ${{ github.event_name == 'release' && matrix.cli }}
        with:
          file: jpki-cli-${{ matrix.target }}.tar.gz
          overwrite: true

  build-nightly:
    needs:
      - checks-nightly
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install nightly-2022-07-26
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-07-26
          override: true
          target: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@76686c56f2b581d1bb5bda44b51f7e24bd9b8b8e
        with:
          key: ${{ matrix.features }}

      - name: Install libpcsclite
        run: sudo apt update && sudo apt install libpcsclite-dev

      - name: Build (FFI/Generic)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --all-features -p jpki-ffi-generic

  deploy:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'release' }}
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@76686c56f2b581d1bb5bda44b51f7e24bd9b8b8e

      - name: Install libpcsclite
        run: sudo apt update && sudo apt install libpcsclite-dev

      - name: Log into crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io (Core)
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --verbose --allow-dirty -p jpki

      - name: Publish to crates.io (CLI)
        run: |
          until cargo publish --verbose --allow-dirty -p jpki-cli
          do
            echo "Still waiting..."
            sleep 5
          done
